  <!-- Modern Navigation Bar -->
  <nav class="navbar">
    <div class="nav-brand">
      <a href="/" class="brand-link">
        <img src="/images/FullLogo_Transparent_NoBuffer.png" alt="Purpose & Perspective Logo" class="brand-logo">
      </a>
    </div>
    
    <div class="nav-links">
      <a href="/" class="nav-link <%= typeof currentPage !== 'undefined' && currentPage === 'home' ? 'active' : '' %>">
        <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
        </svg>
        Home
      </a>
      <a href="/compose" class="nav-link <%= typeof currentPage !== 'undefined' && currentPage === 'compose' ? 'active' : '' %>">
        <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
        </svg>
        Reflect
      </a>
    </div>

    <div class="nav-actions">
      <!-- Search Bar -->
      <div class="search-container">
        <input type="text" id="searchInput" placeholder="Search reflections..." class="search-input">
        <button class="search-btn" id="searchBtn">
          <svg class="search-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </button>
      </div>
      
      <!-- Theme Toggle -->
      <button class="theme-toggle" id="themeToggleBtn" title="Toggle theme">
        <svg class="theme-icon theme-moon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
        </svg>
        <svg class="theme-icon theme-sun" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" style="display: none;">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
        </svg>
      </button>
    </div>
  </nav>
  
  <!-- Database Connection Status Notification -->
  <% if (typeof isMongoConnected !== 'undefined' && !isMongoConnected) { %>
    <div class="alert alert-warning">
      <svg style="width: 1rem; height: 1rem; display: inline-block; vertical-align: middle; margin-right: 0.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
      </svg>
      <strong>Notice:</strong> Database temporarily unavailable. Using temporary storage - your posts will not be saved permanently.
    </div>
  <% } else if (typeof isMongoConnected !== 'undefined' && isMongoConnected) { %>
    <div class="alert alert-success">
      <svg style="width: 1rem; height: 1rem; display: inline-block; vertical-align: middle; margin-right: 0.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
      <strong>Connected:</strong> Database is online - your posts are being saved permanently.
    </div>
  <% } %>
  
  <!-- Enhanced Hero Section -->
  <div class="hero">
    <div class="cloud-layer"></div>
    <div class="hero-content">
      <h1 class="hero-title">Purpose & Perspective</h1>
      <p class="hero-subtitle">Reflections from the journey of living with intention</p>
      <div class="hero-stats">
        <span class="stat-item">
          <svg class="stat-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          <span class="stat-text"><%= typeof posts !== 'undefined' ? posts.length : 0 %> Reflections</span>
        </span>
        <% if (typeof posts !== 'undefined' && posts.length > 0) { %>
          <% const categories = [...new Set(posts.map(post => post.category))]; %>
          <span class="stat-item">
            <svg class="stat-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
            </svg>
            <span class="stat-text"><%= categories.length %> Categories</span>
          </span>
        <% } %>
      </div>
    </div>
    <div class="hero-background"></div>
  </div>

  <!-- Category Filter Bar -->
  <% if (typeof categories !== 'undefined' && categories.length > 0) { %>
    <div class="category-filter">
      <a href="/" class="filter-btn <%= (!selectedCategory || selectedCategory === 'all') ? 'active' : '' %>">All</a>
      <% categories.forEach(category => { %>
        <a href="/?category=<%= encodeURIComponent(category) %>" 
           class="filter-btn <%= selectedCategory === category ? 'active' : '' %>">
          <%= category %>
        </a>
      <% }); %>
    </div>
  <% } %>

  <!-- Theme Toggle JavaScript - CSP Compliant -->
  <script>
    console.log('Script loaded');
    
    function toggleTheme() {
      console.log('toggleTheme called');
      
      const body = document.body;
      const currentTheme = body.getAttribute('data-theme');
      
      console.log('Current theme:', currentTheme);
      console.log('Body element:', body);
      
      if (currentTheme === 'dark') {
        // Switch to light
        body.removeAttribute('data-theme');
        localStorage.setItem('theme', 'light');
        console.log('Switched to light theme');
        updateIcons('light');
      } else {
        // Switch to dark
        body.setAttribute('data-theme', 'dark');
        localStorage.setItem('theme', 'dark');
        console.log('Switched to dark theme');
        updateIcons('dark');
      }
      
      // Force recalculation
      body.offsetHeight;
    }
    
    function updateIcons(theme) {
      const moonIcon = document.querySelector('.theme-moon');
      const sunIcon = document.querySelector('.theme-sun');
      
      console.log('Updating icons for theme:', theme);
      console.log('Moon icon:', moonIcon);
      console.log('Sun icon:', sunIcon);
      
      if (theme === 'dark') {
        if (moonIcon) moonIcon.style.display = 'none';
        if (sunIcon) sunIcon.style.display = 'block';
      } else {
        if (moonIcon) moonIcon.style.display = 'block';
        if (sunIcon) sunIcon.style.display = 'none';
      }
    }
    
    function searchPosts() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const postCards = document.querySelectorAll('.post-card');
      
      if (!searchTerm.trim()) {
        postCards.forEach(card => card.style.display = 'block');
        return;
      }
      
      postCards.forEach(card => {
        const title = card.querySelector('h2')?.textContent.toLowerCase() || '';
        const content = card.querySelector('.post-content')?.textContent.toLowerCase() || '';
        const category = card.querySelector('.category-badge')?.textContent.toLowerCase() || '';
        
        if (title.includes(searchTerm) || content.includes(searchTerm) || category.includes(searchTerm)) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    }
    
    // Load saved theme and set up event listeners on page load
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM loaded, setting up event listeners');
      
      // Set up theme toggle event listener
      const themeToggleBtn = document.getElementById('themeToggleBtn');
      if (themeToggleBtn) {
        themeToggleBtn.addEventListener('click', toggleTheme);
        console.log('Theme toggle event listener added');
      } else {
        console.error('Theme toggle button not found');
      }
      
      // Set up search event listeners
      const searchBtn = document.getElementById('searchBtn');
      const searchInput = document.getElementById('searchInput');
      
      if (searchBtn) {
        searchBtn.addEventListener('click', searchPosts);
      }
      
      if (searchInput) {
        searchInput.addEventListener('input', searchPosts);
      }
      
      // Load saved theme
      const savedTheme = localStorage.getItem('theme');
      console.log('Saved theme:', savedTheme);
      
      if (savedTheme === 'dark') {
        document.body.setAttribute('data-theme', 'dark');
        updateIcons('dark');
      } else {
        document.body.removeAttribute('data-theme');
        updateIcons('light');
      }
    });
  </script>
  
  <!-- External JavaScript for search/filter -->
  <script src="/js/search-filter.js"></script>